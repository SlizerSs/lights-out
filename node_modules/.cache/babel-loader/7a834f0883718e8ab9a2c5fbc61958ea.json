{"ast":null,"code":"import _slicedToArray from \"C:\\\\z\\\\React-Projects\\\\lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"C:\\\\z\\\\React-Projects\\\\lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\z\\\\React-Projects\\\\lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\z\\\\React-Projects\\\\lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\z\\\\React-Projects\\\\lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\z\\\\React-Projects\\\\lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\z\\\\React-Projects\\\\lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\z\\\\React-Projects\\\\lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\z\\\\React-Projects\\\\lights-out\\\\src\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.defaultProps = {\n      nrows: 5,\n      ncols: 5,\n      chanceLightStartsOn: 1.7\n    };\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    }; // TODO: set initial state\n\n    _this.flipCellsAround = _this.flipCellsAround.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function (_createBoard) {\n      function createBoard() {\n        return _createBoard.apply(this, arguments);\n      }\n\n      createBoard.toString = function () {\n        return _createBoard.toString();\n      };\n\n      return createBoard;\n    }(function () {\n      var board = [];\n\n      for (var i = 0; i < this.props.nrows; i++) {\n        var row = [];\n\n        for (var _i = 0; _i < this.props.ncols; _i++) {\n          var light = Math.random() * this.props.chanceLightStartsOn > 1 ? true : false;\n          row.push(light);\n        }\n\n        board.push(row);\n      }\n\n      if (isSolvable(board)) {\n        return board;\n      } else {\n        createBoard();\n      }\n    })\n  }, {\n    key: \"isSolvable\",\n    value: function isSolvable(board) {\n      for (var i = 0; i < this.props.nrows; i++) {\n        var _rowCounter = 0;\n\n        for (var j = 0; j < this.props.ncols; j++) {\n          if (board[i][j]) _rowCounter++;\n        }\n      }\n\n      if (!(rowCounter % 2 === 0 || rowCounter === 0)) return false;\n\n      for (var _i2 = 0; _i2 < this.props.ncols; _i2++) {\n        var _columnCounter = 0;\n\n        for (var _j = 0; _j < this.props.nrows; _j++) {\n          if (board[_j][_i2]) _columnCounter++;\n        }\n      }\n\n      if (!(columnCounter % 2 === 0 || columnCounter === 0)) return false;\n      return true;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n\n      var newBoard = _toConsumableArray(this.state.board);\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          newBoard[y][x] = !newBoard[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n\n\n      flipCell(y, x);\n      flipCell(y + 1, x);\n      flipCell(y - 1, x);\n      flipCell(y, x - 1);\n      flipCell(y, x + 1); // win when every cell is turned off\n      // TODO: determine is the game has been won\n\n      var lightCells = 0;\n      newBoard.forEach(function (element) {\n        element.forEach(function (element) {\n          lightCells += element ? 1 : 0;\n        });\n      });\n      this.setState({\n        board: newBoard,\n        hasWon: lightCells === 0\n      });\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      return this.state.hasWon ? /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 9\n        }\n      }, \"You Won!\") : /*#__PURE__*/React.createElement(\"table\", {\n        className: \"Board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 9\n        }\n      }, this.state.board.map(function (arr, y) {\n        return /*#__PURE__*/React.createElement(\"tr\", {\n          className: \"CellRow\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 11\n          }\n        }, arr.map(function (cell, x) {\n          return /*#__PURE__*/React.createElement(Cell, {\n            key: y + '-' + x,\n            id: y + '-' + x,\n            isLit: cell,\n            flipCellsAroundMe: _this2.flipCellsAround,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 32\n            }\n          });\n        }));\n      })));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nexport default Board;","map":{"version":3,"sources":["C:/z/React-Projects/lights-out/src/Board.js"],"names":["React","Component","Cell","Board","props","defaultProps","nrows","ncols","chanceLightStartsOn","state","hasWon","board","createBoard","flipCellsAround","bind","i","row","light","Math","random","push","isSolvable","rowCounter","j","columnCounter","coord","newBoard","split","map","Number","y","x","flipCell","lightCells","forEach","element","setState","arr","cell"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  defaultProps={\n    nrows:5,\n    ncols:5,\n    chanceLightStartsOn:1.7\n  }\n  constructor(props) {\n    super(props);\n    this.state={\n      hasWon: false,\n      board: this.createBoard()\n    }\n    // TODO: set initial state\n    this.flipCellsAround=this.flipCellsAround.bind(this);\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    for(let i=0;i<this.props.nrows;i++){\n      let row=[]\n      for(let i=0;i<this.props.ncols;i++){\n        let light=Math.random()*this.props.chanceLightStartsOn>1?true:false;\n        row.push(light)\n      }\n      board.push(row)\n    }\n    if(isSolvable(board)){\n      return board\n    }else{\n      createBoard()\n    }\n  }\n\n  isSolvable(board){\n    for(let i=0;i<this.props.nrows; i++){\n      let rowCounter=0;\n      for(let j=0;j<this.props.ncols; j++){\n        if(board[i][j]) rowCounter++\n      }\n    }\n    if(!(rowCounter%2===0 || rowCounter===0))return false\n\n    for(let i=0;i<this.props.ncols; i++){\n      let columnCounter=0;\n      for(let j=0;j<this.props.nrows; j++){\n        if(board[j][i]) columnCounter++\n      }\n    }\n    if(!(columnCounter%2===0 || columnCounter===0))return false\n    return true;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let newBoard = [...this.state.board];\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        newBoard[y][x] = !newBoard[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n    flipCell(y, x);\n    flipCell(y+1, x);\n    flipCell(y-1, x);\n    flipCell(y, x-1);\n    flipCell(y, x+1);\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    let lightCells=0;\n    newBoard.forEach(element => {\n      element.forEach(element => {\n        lightCells+=element?1:0;\n      });\n    });\n    this.setState({board: newBoard, hasWon: lightCells===0});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    return(\n      this.state.hasWon?\n        <div>You Won!</div>\n      :\n      <table className=\"Board\">\n        <tbody>\n        {this.state.board.map((arr,y)=>\n          <tr className=\"CellRow\">\n            {arr.map((cell,x)=><Cell key={y+'-'+x} id={y+'-'+x} isLit={cell} flipCellsAroundMe={this.flipCellsAround}/>)}\n          </tr>\n          )}\n        </tbody>\n      </table>\n    )\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}