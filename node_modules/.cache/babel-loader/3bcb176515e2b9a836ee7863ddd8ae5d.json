{"ast":null,"code":"import _slicedToArray from \"C:\\\\z\\\\React-Projects\\\\lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\z\\\\React-Projects\\\\lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\z\\\\React-Projects\\\\lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\z\\\\React-Projects\\\\lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\z\\\\React-Projects\\\\lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\z\\\\React-Projects\\\\lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\z\\\\React-Projects\\\\lights-out\\\\src\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    }; // TODO: set initial state\n\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = [];\n\n      for (var i = 0; i < this.props.nrows; i++) {\n        var row = [];\n\n        for (var _i = 0; _i < this.props.ncols; _i++) {\n          var light = Math.random() * this.props.chanceLightStartsOn > 1 ? true : false;\n          row.push(light);\n        }\n\n        board.push(row);\n      }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n\n\n      flipCell(y, x);\n      flipCell(y + 1, x + 1);\n      flipCell(y - 1, x + 1);\n      flipCell(y + 1, x - 1);\n      flipCell(y - 1, x - 1); // win when every cell is turned off\n      // TODO: determine is the game has been won\n\n      var lightCells = 0;\n      board.forEach(function (element) {\n        element.forEach(function (element) {\n          lightCells += element ? 1 : 0;\n        });\n      });\n      this.setState({\n        board: board,\n        hasWon: lightCells === 0\n      });\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      return /*#__PURE__*/React.createElement(\"table\", {\n        className: \"Board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 9\n        }\n      }, this.state.board.map(function (arr, y) {\n        return /*#__PURE__*/React.createElement(\"trow\", {\n          className: \"CellRow\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 11\n          }\n        }, arr.map(function (cell, x) {\n          return /*#__PURE__*/React.createElement(Cell, {\n            key: y + '-' + x,\n            isLit: true,\n            flipCellsAroundMe: _this2.flipCellsAround,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 32\n            }\n          });\n        }));\n      })));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nexport default Board;","map":{"version":3,"sources":["C:/z/React-Projects/lights-out/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","i","nrows","row","ncols","light","Math","random","chanceLightStartsOn","push","coord","split","map","Number","y","x","flipCell","lightCells","forEach","element","setState","arr","cell","flipCellsAround"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state={\n      hasWon: false,\n      board: this.createBoard()\n    }\n    // TODO: set initial state\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    for(let i=0;i<this.props.nrows;i++){\n      let row=[]\n      for(let i=0;i<this.props.ncols;i++){\n        let light=Math.random()*this.props.chanceLightStartsOn>1?true:false;\n        row.push(light)\n      }\n      board.push(row)\n    }\n\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n    flipCell(y, x);\n    flipCell(y+1, x+1);\n    flipCell(y-1, x+1);\n    flipCell(y+1, x-1);\n    flipCell(y-1, x-1);\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    let lightCells=0;\n    board.forEach(element => {\n      element.forEach(element => {\n        lightCells+=element?1:0;\n      });\n    });\n\n    this.setState({board: board, hasWon: lightCells===0});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    return(\n      <table className=\"Board\">\n        <tbody>\n        {this.state.board.map((arr,y)=>\n          <trow className=\"CellRow\">\n            {arr.map((cell,x)=><Cell key={y+'-'+x} isLit={true} flipCellsAroundMe={this.flipCellsAround}/>)}\n          </trow>\n          )}\n        </tbody>\n      </table>\n    )\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}