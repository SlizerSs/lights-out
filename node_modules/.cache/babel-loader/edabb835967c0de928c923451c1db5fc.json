{"ast":null,"code":"import _slicedToArray from \"C:\\\\z\\\\React-Projects\\\\lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"C:\\\\z\\\\React-Projects\\\\lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\z\\\\React-Projects\\\\lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\z\\\\React-Projects\\\\lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\z\\\\React-Projects\\\\lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\z\\\\React-Projects\\\\lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\z\\\\React-Projects\\\\lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\z\\\\React-Projects\\\\lights-out\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\z\\\\React-Projects\\\\lights-out\\\\src\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    }; // TODO: set initial state\n\n    _this.flipCellsAround = _this.flipCellsAround.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = [];\n\n      for (var i = 0; i < this.props.nrows; i++) {\n        var row = [];\n\n        for (var _i = 0; _i < this.props.ncols; _i++) {\n          var light = Math.random() * this.props.chanceLightStartsOn > 1 ? true : false;\n          row.push(light);\n        }\n\n        board.push(row);\n      }\n\n      if (this.isSolvable(board)) {\n        return board;\n      } else {\n        return this.createBoard();\n      }\n    }\n  }, {\n    key: \"isSolvable\",\n    value: function isSolvable(board) {\n      for (var i = 0; i < this.props.nrows; i++) {\n        var rowCounter = 0;\n\n        for (var j = 0; j < this.props.ncols; j++) {\n          if (board[i][j]) rowCounter++;\n        }\n\n        if (!(rowCounter % 2 === 0 || rowCounter === 0)) return false;\n      }\n\n      for (var _i2 = 0; _i2 < this.props.ncols; _i2++) {\n        var columnCounter = 0;\n\n        for (var _j = 0; _j < this.props.nrows; _j++) {\n          if (board[_j][_i2]) columnCounter++;\n        }\n\n        if (!(columnCounter % 2 === 0 || columnCounter === 0)) return false;\n      }\n\n      return true;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n\n      var newBoard = _toConsumableArray(this.state.board);\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          newBoard[y][x] = !newBoard[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n\n\n      flipCell(y, x);\n      flipCell(y + 1, x);\n      flipCell(y - 1, x);\n      flipCell(y, x - 1);\n      flipCell(y, x + 1); // win when every cell is turned off\n      // TODO: determine is the game has been won\n\n      var lightCells = 0;\n      newBoard.forEach(function (element) {\n        element.forEach(function (element) {\n          lightCells += element ? 1 : 0;\n        });\n      });\n      this.setState({\n        board: newBoard,\n        hasWon: lightCells === 0\n      });\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      if (this.state.hasWon) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"Board-title Winner\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"neon-orange\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 11\n          }\n        }, \"YOU\"), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"neon-blue\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 11\n          }\n        }, \"WiN!\"));\n      } else {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"Board-title\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"neon-orange\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 13\n          }\n        }, \"LIGHTS\"), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"neon-blue\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 13\n          }\n        }, \"OUT\")), /*#__PURE__*/React.createElement(\"table\", {\n          className: \"Board\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"tbody\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 13\n          }\n        }, this.state.board.map(function (arr, y) {\n          return /*#__PURE__*/React.createElement(\"tr\", {\n            className: \"CellRow\",\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 15\n            }\n          }, arr.map(function (cell, x) {\n            return /*#__PURE__*/React.createElement(Cell, {\n              key: y + '-' + x,\n              id: y + '-' + x,\n              isLit: cell,\n              flipCellsAroundMe: _this2.flipCellsAround,\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 36\n              }\n            });\n          }));\n        }))));\n      }\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: 1.7\n};\nexport default Board;","map":{"version":3,"sources":["C:/z/React-Projects/lights-out/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","flipCellsAround","bind","i","nrows","row","ncols","light","Math","random","chanceLightStartsOn","push","isSolvable","rowCounter","j","columnCounter","coord","newBoard","split","map","Number","y","x","flipCell","lightCells","forEach","element","setState","arr","cell","defaultProps"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps={\n    nrows:5,\n    ncols:5,\n    chanceLightStartsOn:1.7\n  }\n  constructor(props) {\n    super(props);\n    this.state={\n      hasWon: false,\n      board: this.createBoard()\n    }\n    // TODO: set initial state\n    this.flipCellsAround=this.flipCellsAround.bind(this);\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    for(let i=0;i<this.props.nrows;i++){\n      let row=[]\n      for(let i=0;i<this.props.ncols;i++){\n        let light=Math.random()*this.props.chanceLightStartsOn>1?true:false;\n        row.push(light)\n      }\n      board.push(row)\n    }\n    if(this.isSolvable(board)){\n      return board\n    }else{\n      return this.createBoard()\n    }\n  }\n\n  isSolvable(board){\n    for(let i=0;i<this.props.nrows; i++){\n      let rowCounter=0;\n      for(let j=0;j<this.props.ncols; j++){\n        if(board[i][j]) rowCounter++\n      }\n      if(!(rowCounter%2===0 || rowCounter===0))return false\n    }\n\n    for(let i=0;i<this.props.ncols; i++){\n      let columnCounter=0;\n      for(let j=0;j<this.props.nrows; j++){\n        if(board[j][i]) columnCounter++\n      }\n      if(!(columnCounter%2===0 || columnCounter===0))return false\n    }\n\n    return true;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let newBoard = [...this.state.board];\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        newBoard[y][x] = !newBoard[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n    flipCell(y, x);\n    flipCell(y+1, x);\n    flipCell(y-1, x);\n    flipCell(y, x-1);\n    flipCell(y, x+1);\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    let lightCells=0;\n    newBoard.forEach(element => {\n      element.forEach(element => {\n        lightCells+=element?1:0;\n      });\n    });\n    this.setState({board: newBoard, hasWon: lightCells===0});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n    if(this.state.hasWon){\n      return (\n        <div className=\"Board-title Winner\">\n          <div className=\"neon-orange\">YOU</div>\n          <div className=\"neon-blue\">WiN!</div>\n        </div>\n      );\n    }else{\n      return(\n        <div>\n          <div className=\"Board-title\">\n            <div className=\"neon-orange\">LIGHTS</div>\n            <div className=\"neon-blue\">OUT</div>\n          </div>\n          <table className=\"Board\">\n            <tbody>\n            {this.state.board.map((arr,y)=>\n              <tr className=\"CellRow\">\n                {arr.map((cell,x)=><Cell key={y+'-'+x} id={y+'-'+x} isLit={cell} flipCellsAroundMe={this.flipCellsAround}/>)}\n              </tr>\n              )}\n            </tbody>\n          </table>\n        </div>\n\n        \n      )\n    }\n    \n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}